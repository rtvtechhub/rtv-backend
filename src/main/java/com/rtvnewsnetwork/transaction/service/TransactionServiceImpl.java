package com.rtvnewsnetwork.transaction.service;

import com.rtvnewsnetwork.config.kafka.RewardProperties;
import com.rtvnewsnetwork.event.model.EventType;
import com.rtvnewsnetwork.transaction.model.TransactionModel;
import com.rtvnewsnetwork.transaction.model.TransactionType;
import com.rtvnewsnetwork.transaction.repository.TransactionRepository;
import com.rtvnewsnetwork.user.service.UserService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;

import static com.rtvnewsnetwork.transaction.model.TransactionType.CREDIT;
import static com.rtvnewsnetwork.transaction.model.TransactionType.DEBIT;


@Service
public class TransactionServiceImpl implements TransactionService {

    private final TransactionRepository transactionRepository;
    private final RewardProperties rewardProperties;
    private final UserService userService;

    public TransactionServiceImpl(TransactionRepository transactionRepository,
                                  RewardProperties rewardProperties,
                                  UserService userService) {
        this.transactionRepository = transactionRepository;
        this.rewardProperties = rewardProperties;
        this.userService = userService;
    }

    @Override
    public TransactionModel createTransactionData(EventType eventType, String userId) {
        if (eventType == null || userId == null) {
            throw new IllegalArgumentException("EventType or userId cannot be null");
        }

        Map<String, Integer> coins = rewardProperties.getCoins();
        Integer amount = coins.get(eventType.name());
        if (amount == null) {
            throw new IllegalArgumentException("Reward points not found for event type: " + eventType);
        }

        TransactionType transactionType;
        switch (eventType) {
            case SIGN_UP:
            case COMMENT_ON_POST:
            case PARTICIPATE_IN_QUIZ:
            case REACT_TO_POST:
            case SHARE_POST:
            case POST_LIKE:
            case USER_PROFILE_COMPLETE:
            case QUIZ_REWARD:
                transactionType = CREDIT;
                break;
            case DELETE_POST_COMMENT:
            case POST_DISLIKE:
                transactionType = DEBIT;
                break;
            case NEW_POST:
            case USER_PROFILE_COMPLETE_NOTIFICATION:
            case REVIEW:
            case COIN_CREDIT:
            case COIN_DEBIT:
            case OTHERS:
            default:
                throw new UnsupportedOperationException("Transaction type for " + eventType + " is not supported yet.");
        }

        return new TransactionModel(
                null,                 // transactionId will be generated by MongoDB
                userId,
                transactionType,
                amount,
                java.time.Instant.now()
        );
    }

    @Override
    @Transactional
    public void saveTransactionAndUpdateWallet(TransactionModel transactionModel) {
        if (userService.updateUserWallet(transactionModel)) {
            transactionRepository.save(transactionModel);
        } else {
            System.out.println("Wallet update failed. Transaction not saved.");
        }
    }
//
//    @Override
//    public List<UserCoinDto> findTopFanBadge(String startDate, String endDate) {
//        return transactionRepository.findTopUsersByEarnedCoins(startDate, endDate);
//    }
}
